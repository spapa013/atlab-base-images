name: Release images (latest + vX.Y.Z)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag (e.g., v1.2.3)"
        required: true
  push:
    tags: ['v*']

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || inputs.version }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository }}

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      matrix:  ${{ steps.mk.outputs.matrix }}
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Resolve version
        id: ver
        shell: bash
        run: |
          if [ -n "${{ github.event.release.tag_name }}" ]; then v="${{ github.event.release.tag_name }}"
          elif [ "${{ github.ref_type }}" = "tag" ]; then v="${{ github.ref_name }}"
          else v="${{ inputs.version }}"; fi
          [[ "$v" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] || { echo "Need vX.Y.Z, got: $v"; exit 1; }
          echo "version=$v" >> "$GITHUB_OUTPUT"

      - name: Checkout at tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.ver.outputs.version }}

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - id: mk
        run: |
          python .github/scripts/discover_images.py > matrix.json
          echo "matrix=$(cat matrix.json)" >> "$GITHUB_OUTPUT"

  build:
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.discover.outputs.version }}

      - name: Hidden? skip
        if: ${{ matrix.hidden }}
        run: echo "Hidden image; skipping."

      - uses: docker/setup-buildx-action@v3
        if: ${{ !matrix.hidden }}

      - uses: docker/login-action@v3
        if: ${{ !matrix.hidden }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push (:vX.Y.Z + :latest + :sha-<short>)
        if: ${{ !matrix.hidden }}
        run: |
          set -euo pipefail
          dir="${{ matrix.dir }}"
          name="${{ matrix.name }}"
          img="${IMAGE_PREFIX}/${name}"
          version='${{ needs.discover.outputs.version }}'
          sha_tag="sha-$(git rev-parse --short=7 HEAD)"
          plats="${{ matrix.platforms }}"

          echo "::group::Building ${img}:${version}, :latest, :${sha_tag} (platforms=$plats)"
          docker buildx build \
            --push \
            --platform "$plats" \
            -f "$dir/Dockerfile" \
            -t "${img}:${version}" \
            -t "${img}:latest" \
            -t "${img}:${sha_tag}" \
            --cache-from type=gha \
            --cache-to   type=gha,mode=max \
            "$dir"
          echo